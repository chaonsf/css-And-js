//package.json  注意各个包的版本号
{
  "name": "accountAndReport",
  "version": "1.0.0",
  "description": "",
  "main": "index.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1",
    "watch": "webpack --watch"
  },
  "keywords": [],
  "author": "",
  "license": "ISC",
  "dependencies": {},
  "devDependencies": {
    "babel-cli": "^6.24.1",
    "babel-core": "^6.22.1",
    "babel-loader": "^7.1.1",
    "babel-preset-env": "^1.3.2",
    "babel-preset-es2015": "^6.24.1",
    "css-loader": "^1.0.1",
    "extract-text-webpack-plugin": "^3.0.2",
    "node-sass": "^4.10.0",
    "sass-loader": "^7.1.0",
    "style-loader": "^0.23.1",
    "uglifyjs-webpack-plugin": "^1.1.1",
    "webpack": "^3.6.0"
  }
}
//webpack.config.js   参考jspang
const path=require('path');
const uglify=require('uglifyjs-webpack-plugin');
const extractTextPlugin =require('extract-text-webpack-plugin')
const glob=require("glob");
let files=glob.sync("./es6AndCss/es6/*.js");  //需要编译的文件夹里的文件
let files2=glob.sync("./es6AndCss/es6/app/*.js")
let dir=(file)=>{
    let brr={};
    for(let i=0;i<file.length;i++){
        let b=path.basename(file[i],".js")
         brr[b]=file[i]
    }
    return brr
}
let object1=dir(files);
let object2=dir(files2);
let obj=Object.assign(object1,object2)

module.exports={
      devtool:"source-map",
      entry:obj,
      output:{
         path:path.resolve(__dirname, "../KOA/static/js"),
         filename:'[name].js'
      },
      module:{
        rules:[
            {
                test:/(\.jsx|\.js)$/,
                use:{
                    loader:"babel-loader",
                    options:{
                        presets:[
                            "env"
                        ]
                    }
                },
                exclude:[
                     path.resolve(__dirname,"node_modules"),
                     path.resolve(__dirname,"src"),
                           ],
                include:path.resolve(__dirname,"static")
            },
            {
              test:/\.css$/,
              use:extractTextPlugin.extract({
                fallback: "style-loader",
                use: "css-loader"
               })
            },
            {
               test:/\.scss$/,
               use:extractTextPlugin.extract({
                use: [{
                    loader: "css-loader"
                }, {
                    loader: "sass-loader"
                }],
                fallback: "style-loader"
            })

            }
        ]
      },
      plugins:[
        new uglify({
            sourceMap: true
        }),
        new extractTextPlugin("../css/index.css")
       
      ],
      devServer:{
        
      }

}
